:- use_module(btypes).

s_PID(['process1', 'process2', 'process3']).

init_constants :-
    !.

start(State_3) :-
    init_constants,
    empty(State_0),
    update('active', [], State_0, State_1),
    update('ready', [], State_1, State_2),
    update('waiting', [], State_2, State_3).

% Transitions
trans('new'(pp=Expr_pp), State_0, State_1) :-
    % Select
    s_PID(Expr_0),
    mppcg_member(Expr_pp, Expr_0), 
    get(State_0, 'active', Expr_1),
    \+ mppcg_member(Expr_pp, Expr_1), 
    get(State_0, 'ready', Expr_2),
    get(State_0, 'waiting', Expr_3),
    mppcg_setUnion(Expr_2, Expr_3, Expr_4),
    \+ mppcg_member(Expr_pp, Expr_4),

    % Then
    get(State_0, 'waiting', Expr_5),
    mppcg_setUnion(Expr_5, [Expr_pp], Expr_6),
    update('waiting', Expr_6, State_0, State_1).

trans('del'(pp=Expr_pp), State_0, State_1) :-
    % Select
    get(State_0, 'waiting', Expr_0),
    mppcg_member(Expr_pp, Expr_0),

    % Then
    mppcg_minus(Expr_0, [Expr_pp], Expr_1),
    update('waiting', Expr_1, State_0, State_1).

trans('ready'(rr=Expr_rr), State_0, State_2) :-
    % Select
    get(State_0, 'waiting', Expr_0),
    mppcg_member(Expr_rr, Expr_0),

    % Then
    mppcg_minus(Expr_0, [Expr_rr], Expr_1),
    update('waiting', Expr_1, State_0, State_1),
    ((get(State_1, 'active', Expr_2),
    mppcg_equal(Expr_2, [])) ->
    (update('active', [Expr_rr], State_1, State_2),
    Expr_4 = Expr_2)
    ;
    (get(State_1, 'ready', Expr_3),
    mppcg_setUnion(Expr_3, [Expr_rr], Expr_4),
    update('ready', Expr_4, State_1, State_2))).

trans('swap'(pp=Expr_pp), State_0, State_3) :-
    s_PID(Expr_0),
    mppcg_member(Expr_pp, Expr_0), 
    ((get(State_0, 'ready', Expr_1),
    mppcg_notEqual(Expr_1, [])) ->
    (get(State_0, 'ready', Expr_2),
    mppcg_member(Expr_pp, Expr_2)); true), 
    get(State_0, 'active', Expr_3),
    mppcg_notEqual(Expr_3, []),
    get(State_0, 'waiting', Expr_4),
    get(State_0, 'active', Expr_5),
    mppcg_setUnion(Expr_4, Expr_5, Expr_6),
    update('waiting', Expr_6, State_0, State_1),
    ((get(State_1, 'ready', Expr_7),
    mppcg_equal(Expr_7, [])) ->
    (update('active', [], State_1, State_2),
    State_3 = State_2,
    Expr_9 = Expr_7)
    ;
    (update('active', [Expr_pp], State_1, State_2),
    get(State_2, 'ready', Expr_8),
    mppcg_minus(Expr_8, [Expr_pp], Expr_9),
    update('ready', Expr_9, State_2, State_3))).

% Invariant
prop(State, unsafe) :-
    \+ check_inv(State),
    !.
prop(State, State) :- !.

check_inv(State) :-
    check_inv_0(State), !, 
    check_inv_1(State), !, 
    check_inv_2(State), !, 
    check_inv_3(State), !, 
    check_inv_4(State), !, 
    check_inv_5(State), !, 
    check_inv_6(State), !, 
    check_inv_7(State), !, 
    check_inv_8(State).

check_inv_0(State_0) :-
    get(State_0, 'active', Expr_0),
    s_PID(Expr_1),
    mppcg_powerSet(Expr_1, Expr_2),
    mppcg_member(Expr_0, Expr_2),
    !.

check_inv_1(State_0) :-
    get(State_0, 'ready', Expr_0),
    s_PID(Expr_1),
    mppcg_powerSet(Expr_1, Expr_2),
    mppcg_member(Expr_0, Expr_2),
    !.

check_inv_2(State_0) :-
    get(State_0, 'waiting', Expr_0),
    s_PID(Expr_1),
    mppcg_powerSet(Expr_1, Expr_2),
    mppcg_member(Expr_0, Expr_2),
    !.

check_inv_3(State_0) :-
    get(State_0, 'active', Expr_0),
    s_PID(Expr_1),
    mppcg_subset(Expr_0, Expr_1),
    !.

check_inv_4(State_0) :-
    get(State_0, 'ready', Expr_0),
    s_PID(Expr_1),
    mppcg_subset(Expr_0, Expr_1),
    !.

check_inv_5(State_0) :-
    get(State_0, 'waiting', Expr_0),
    s_PID(Expr_1),
    mppcg_subset(Expr_0, Expr_1),
    !.

check_inv_6(State_0) :-
    get(State_0, 'ready', Expr_0),
    get(State_0, 'waiting', Expr_1),
    mppcg_setIntersection(Expr_0, Expr_1, Expr_2),
    mppcg_equal(Expr_2, []),
    !.

check_inv_7(State_0) :-
    get(State_0, 'active', Expr_0),
    get(State_0, 'ready', Expr_1),
    get(State_0, 'waiting', Expr_2),
    mppcg_setUnion(Expr_1, Expr_2, Expr_3),
    mppcg_setIntersection(Expr_0, Expr_3, Expr_4),
    mppcg_equal(Expr_4, []),
    !.

check_inv_8(State_0) :-
    get(State_0, 'active', Expr_0),
    mppcg_card(Expr_0, Expr_1),
    Expr_1 =< 1,
    !.
