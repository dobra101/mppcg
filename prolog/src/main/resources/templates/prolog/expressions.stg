binaryExpression(lhs, rhs, operator, exprCount, math) ::= <<
Expr_<exprCount> <if(math)>is<else>=<endif> <lhs> <operator> <rhs>
>>

enumCollection(name, elements) ::= <<
<name>([<elements; separator= ", ">]).
>>

// TODO: add enum name?
enumEntryExpression(name) ::= <<
'<name>'
>>

identifierExpression(name, stateCount, exprCount) ::= <<
get(State_<stateCount>, '<name>', Expr_<exprCount>)
>>

// TODO: implement
intervalExpression() ::= <<
>>

// TODO: add set name?
setEntryExpression(name) ::= <<
'<name>'
>>

// TODO: add type ?
valueExpression(value) ::= <<
<value>
>>