anonymousSetCollectionExpression(elements) ::= <<
[<elements; separator=", ">]
>>

binaryExpression(lhs, rhs, operator, exprCount, math) ::= <<
Expr_<exprCount> <if(math)>is<else>=<endif> <lhs> <operator> <rhs>
>>

unaryCollectionExpression(collection, operator, exprCount) ::= <<
UnaryCollectionExpression:
<operator>(<collection>, Expr_<exprCount>)
>>

binaryCollectionExpression(lhs, rhs, operator, exprCount) ::= <<
<operator>(<lhs>, <rhs>, Expr_<exprCount>)
>>

enumCollectionExpression(name, elements, isParameter, exprCount) ::= <<
<if(isParameter)>
s_<name>(Expr_<exprCount>)<else>
s_<name>([<elements; separator = ", ">])<endif>
>>

// TODO: add enum name?
enumEntryExpression(name) ::= <<
'<name>'
>>

identifierExpression(name, stateCount, exprCount) ::= <<
get(State_<stateCount>, '<name>', Expr_<exprCount>)
>>

intervalExpression(lhs, rhs) ::= <<
(<lhs>, <rhs>)
>>

// TODO: add set name?
setEntryExpression(name) ::= <<
'<name>'
>>

// TODO: add type ?
valueExpression(value) ::= <<
<value>
>>