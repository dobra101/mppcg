// TODO: use remaining variables
machine(name, parameters, constraints, sets, constants, concrete_constants, properties, definitions, variables, concrete_variables, invariant, assertions, initialization, operations) ::= <<
:- use_module(environment).

<sets; separator="\n\n">

start(st).


<initialization>

<operations; separator="\n\n">


<invariant>
>>

// TODO: add returnValues ?
operation(name, parameters, body, resultStateCount) ::= <<
trans('<name>', State_0, State_<resultStateCount>) :-
    State_0 \= st,

    <body>.
>>

// TODO: implement
function() ::= <<
>>

invariant(body) ::= <<
check_inv(State_0) :-
    <body>,
    !.
>>

initialization(body, resultStateCount) ::= <<
trans(initialize, st, State_<resultStateCount>) :-
    empty(State_0),
    <body; separator=",\n">.
>>

precondition(predicate, substitution) ::= <<
<predicate>,
<substitution>
>>

// TODO: add else, when
select(condition, then, elseSubstitution, when) ::= <<
<condition>,
<then>
>>


/* XTL */
props(invariants) ::= <<
prop(st, uninitialized) :- !.
prop(State, unsafe) :-
    State \= st,
    \+ check_inv(State),
    !.
prop(State, List) :-
    State \= st,
    avl2List(State, List),
    !.
>>
