// TODO: use remaining variables
machine(name, parameters, constraints, sets, constants, concrete_constants, properties, definitions, variables, concrete_variables, invariant, assertions, initialization, operations, methods) ::= <<
:- use_module(library(avl)).

<if(sets)>
<sets; separator=".\n\n">.
<endif>

start(st).

% Transitions
<initialization>

<operations; separator="\n\n">

% Invariant
<invariant>

% AVL
get(State, Key, Value) :-
    avl:avl_fetch(Key, State, Value).

empty(T) :- avl:empty_avl(T).

update(Key, Value, AVL, NewAVL) :-
    avl:avl_store(Key, AVL, Value, NewAVL).

avl2List(AVL, List) :-
    avl:avl_to_list(AVL, List).
>>

// TODO: add returnValues ?
operation(name, parameters, body, resultStateCount) ::= <<
trans('<name>', State_0, State_<resultStateCount>) :-
    State_0 \= st,

    <body>.
>>

// TODO: implement
function(lhs, rhs, type, mapType) ::= <<
Function:
lhs: <lhs>
rhs: <rhs>
Type: <type>
mapType: <mapType>
>>

binaryFunctionExpression(lhs, rhs, operator, exprCount) ::= <<
<operator>(<lhs>, <rhs>, Expr_<exprCount>)
>>

callFunction(expression, parameters, exprCount) ::= <<
callFunction(<expression>, <parameters>, Expr_<exprCount>)
>>

couple(list) ::= <<
Couple:
List: <list>
>>

unaryFunctionExpression(expression, operator, exprCount) ::= <<
<operator>(<expression>, Expr_<exprCount>)
>>

invariant(body, idx) ::= <<
check_inv_<idx>(State_0) :-
    <body>,
    !.
>>

invariants(list) ::= <<
<list; separator="\n\n">
>>

quantifier(identifier, predicate, type) ::= <<
Quantifier:
Identifier: <identifier>
Predicate: <predicate>
Type: <type>
>>

initialization(body, resultStateCount) ::= <<
trans(initialize, st, State_<resultStateCount>) :-
    empty(State_0),
    <body; separator=",\n">.
>>

// TODO: make parallel
parallelSubstitution(substitutions) ::= <<
% Parallel Substitution:
<substitutions; separator=",\n">
>>

precondition(predicate, substitution) ::= <<
<predicate>,
<substitution>
>>

// TODO: add else, when
select(condition, then, elseSubstitution, when) ::= <<
<condition>,
<then>
>>


/* XTL */
props(invariants, indices) ::= <<
prop(st, uninitialized) :- !.
prop(State, unsafe) :-
    State \= st,
    \+ check_inv(State),
    !.
prop(State, List) :-
    State \= st,
    avl2List(State, List),
    !.

check_inv(State) :-
    <indices :{ idx | check_inv_<idx>(State),}; separator="\n">
    !.

<invariants>
>>

domain() ::= <<
>>

range() ::= <<
>>

reverse() ::= <<
>>

domainRestriction() ::= <<
>>

domainSubtraction() ::= <<
>>

image() ::= <<
>>

overwrite() ::= <<
>>

rangeRestriction() ::= <<
>>

rangeSubtraction() ::= <<
>>

updateStateCount(newCount, oldCount) ::= <<
State_<newCount> = State_<oldCount>
>>

updateExprCount(newCount, oldCount) ::= <<
Expr_<newCount> = Expr_<oldCount>
>>