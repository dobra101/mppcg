machine(name, parameters, constraints, sets, constants, concrete_constants, properties, definitions, variables, concrete_variables, initialization, invariant, assertions, operations, transitions) ::= <<
public class <name> {
    <parameters>
    <constraints>
    <sets>

    <constants; separator="\n">
    <concrete_constants; separator="\n">
    <variables; separator="\n">

    <properties>
    <definitions>
    <concrete_variables>
    <assertions>
    <initialization>

    <operations; separator="\n\n">

    <transitions; separator="\n\n">

    <invariant>

    private Integer succ(Integer x) {
        return x+1;
    }

    private Integer pred(Integer x) {
        return x-1;
    }
}
>>

operation(name, parameters, body, returnValues, type) ::= <<
public <if(type)><type><else>void<endif> <name>(<parameters>) {
    <body>
    <if(returnValues)>
    return <returnValues>;
    <endif>
}
>>

transition(name, body, parameters) ::= <<
public boolean tr_<name>(<parameters>) {
    return <body>;
}
>>

function(left, right) ::= <<
<left>[<right>]
>>

invariant(body, idx, ignoreTypeCheck) ::= <<
public boolean check_inv_<idx>() {
    <if(ignoreTypeCheck)>// ignore type check
return true;
    <else>return <body>;<endif>
}
>>

invariants(list) ::= <<
<list; separator="\n\n">
>>

initialization(substitutions, name) ::= <<
public <name>() {
    <substitutions; separator="\n">
}
>>

precondition(predicate, substitution) ::= <<
<predicate>
<substitution>
>>

// TODO: only else, when
select(condition, then, elseSubstitution, when) ::= <<
<if(then)><then><else>// skip<endif>
>>

// TODO: make parallel
parallelSubstitution(substitutions) ::= <<
// Parallel Substitution:
<substitutions; separator="\n">
>>

concreteIdentifier(name, value, type, declare) ::= <<
<if(declare)>
<type> <name> = <value>;<else>
<name><endif>
>>

lambdaExpression(identifier, predicate, expression) ::= <<
Lambda:
I: <identifier>
P: <predicate>
E: <expression>
>>

callFunction(expression, parameters) ::= <<
<expression>.get(<parameters>)
>>

unaryFunctionExpression(expression, operator) ::= <<
<expression>.<operator>()
>>

binaryFunctionExpression(left, right, operator, swap) ::= <<
<if(swap)><right>.<operator>(<left>)<else>
<left>.<operator>(<right>)<endif>
>>

couple(from, to) ::= <<
new BCouple\<\>(<from>, <to>)
>>

sequence(elements) ::= <<
new BSequence\<\>(<elements; separator=", ">)
>>

binarySequenceExpression(left, right, operator) ::= <<
<left>.<operator>(<right>)
>>

unarySequenceExpression(sequence, operator) ::= <<
<sequence>.<operator>()
>>

comprehensionSetExpression(identifiers, supplier, predicates) ::= <<
<supplier: {s | <s.keys: {key | <s.(key)>.forEach(<key> -> ...)}>}; separator=", ">

---
<supplier>.forEach((<identifiers; separator=", ">) ->
    (<predicates; separator=" && ">)
)
>>