optimizedBinaryPredicateEqual(lhs, rhs, stateCount, negate, useGet) ::= <<
<if(useGet)><if(negate)>\+ <endif>get(State_<stateCount>, '<lhs>', [<rhs>])<else>
<if(negate)><lhs> \= <rhs><else><lhs> = <rhs><endif><endif>
>>

start(S), findall(S4, (
    trans(T, S, S1),
    trans(T1, S1, S2),
    trans(T2, S2, S3),
    trans(T3, S3, S4),
    trans(T4, S4, S5),
    trans(T5, S5, S6),
    trans(T6, S6, S7),
    trans(T7, S7, S8),
    trans(T8, S8, S9)), States), ordsets:list_to_ordset(States, Ordered), length(States, Length), length(Ordered, L1).

start(S),
trans(TT, S, SS1),
trans(TT1, SS1, SS2),
trans(TT2, SS2, SS3),
trans(TT3, SS3, SS4),
trans(TT4, SS4, SS5),
trans(TT5, SS5, SS6),
trans(TT6, SS6, SS7),
trans(TT7, SS7, SS8),
trans(TT8, SS8, SS9),
!,
trans(T, S, S1),
trans(T1, S1, S2),
trans(T2, S2, S3),
trans(T3, S3, S4),
trans(T4, S4, S5),
trans(T5, S5, S6),
trans(T6, S6, S7),
trans(T7, S7, S8),
trans(T8, S8, S9),
ordsets:list_to_ord_set([TT,TT1,TT2,TT3,TT4,TT5,TT6,TT7,TT8], TO1),
ordsets:list_to_ord_set([T,T1,T2,T3,T4,T5,T6,T7,T8], TO2),
TO1 = TO2,
SS9 \= S9.
Y = T-T1-T2-T3-T4-T5-T6-T7-T8,
X \= Y.